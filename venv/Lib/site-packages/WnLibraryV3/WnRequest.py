import time
import json
import requests
from WnLibraryV3 import WnLog
from WnLibraryV3.WnEncoder import WnEncoder

path = WnLog.path

'''
HTTP/HTTPS请求类关键字
'''


class WnRequest(object):

    ROBOT_LIBRARY_SCOPE = "GLOBAL"

    def wn_check_res(self, res, appid, suc, err_code=0, status_code=200, console=0, save_log=1, log_path=path,
                  title='请求'):
        WnLog.wn_log((res.content).decode('utf-8') + '\n', console=console, save_log=save_log, log_path=log_path)
        assert str(res.status_code) == str(status_code), title + ' 验证不通过: status_code错误'
        assert str(res.json()['appid']) == str(appid), title + ' 验证不通过: appid错误'
        assert suc == res.json()['success'], title + ' 验证不通过: success错误'
        log_str = '\n[检查结果_%s:\nPASS:status_code == %s\nPASS:appid == %s\nPASS:success == %s\n' % (
        title, status_code, appid, suc)
        if suc == True:
            assert res.json()['errorDetail'] == None, title + ' 验证不通过: 请求成功,errDetail不为空'
            log_str += 'PASS:errorDetail == null'
        else:
            assert res.json()['data'] == None, title + ' 验证不通过: 请求报错,data不为空'
            assert res.json()['errorDetail'] != None, title + ' 验证不通过: 请求报错,errDetail为空'
            assert res.json()['errorDetail']['code'] == err_code, title + ' 验证不通过: 请求报错,errcode不正确'
            log_str += 'PASS:data == null\nPASS:errorDetail != null\nPASS:errCode == ' + str(err_code)
        WnLog.wn_log(log_str + '\n]\n', console=console, save_log=save_log, log_path=log_path)

    def wn_check_success(self, res, suc, err_code=0, status_code=200, console=0, save_log=1, log_path=path,
                  title='请求'):
        try:
            # WnLog.wn_log((res.content).decode('utf-8') + '\n', console=console, save_log=save_log, log_path=log_path)
            WnLog.wn_log(json.dumps(res.json(), indent=4, ensure_ascii=False, cls=WnEncoder) + '\n', console=console, save_log=save_log, log_path=log_path)
        except Exception as e:
            WnLog.wn_log('打印返回结果报错:'+str(e)+'\n', console=console, save_log=save_log, log_path=log_path)
        assert str(res.status_code) == str(status_code), title + ' 验证不通过: status_code错误'
        assert suc == res.json()['success'], title + ' 验证不通过: success错误'
        log_str = '\n[检查结果_%s:\nPASS:status_code == %s\nPASS:success == %s\n' % (
        title, status_code, suc)
        if suc == True:
            assert res.json()['errorDetail'] == None, title + ' 验证不通过: 请求成功,errDetail不为空'
            log_str += 'PASS:errorDetail == null'
        else:
            assert res.json()['data'] == None, title + ' 验证不通过: 请求报错,data不为空'
            assert res.json()['errorDetail'] != None, title + ' 验证不通过: 请求报错,errDetail为空'
            assert res.json()['errorDetail']['code'] == err_code, title + ' 验证不通过: 请求报错,errcode不正确'
            log_str += 'PASS:data == null\nPASS:errorDetail != null\nPASS:errCode == ' + str(err_code)
        WnLog.wn_log(log_str + '\n]\n', console=console, save_log=save_log, log_path=log_path)

    def wn_check_success2(self, res, suc, err_code=0, status_code=200, console=0, save_log=1, log_path=path,
                  title='请求'):
        try:
            WnLog.wn_log(json.dumps(res.json(), indent=4, ensure_ascii=False, cls=WnEncoder) + '\n', console=console, save_log=save_log, log_path=log_path)
        except Exception as e:
            WnLog.wn_log('打印返回结果报错:'+str(e)+'\n', console=console, save_log=save_log, log_path=log_path)
        assert str(res.status_code) == str(status_code), title + ' 验证不通过: status_code错误'
        assert suc == res.json()['success'], title + ' 验证不通过: success错误'

    def wn_check_data_not_null(self, data, description):
        assert data != None, description

    def wn_check_data_not_empty(self, data, description):
        assert data != "", description

    def wn_post_req(self, url, uri, data, time_out, header, title='无标题', alias='无别名', console=0, save_log=1, log_path=path):
        url = url + uri
        data_str = json.dumps(json.loads(str(data)), indent=None, ensure_ascii=False,
                              cls=WnEncoder) if data != None else None
        if type(data) == str:
            data = str(data)
        t1 = time.time()
        response = requests.post(url=url, data=data, headers=header, verify=False)
        t2 = time.time()
        dt = t2 - t1
        dt_str = str('%.4f' % dt)
        resp_str = json.dumps(response.json(), indent=None, ensure_ascii=False, cls=WnEncoder)
        if dt > float(time_out):
            WnLog.wn_log('请求接口超时:%s_%s(时长 %ss)' % (title, alias, dt_str), level='WARN')
        WnLog.wn_log('\n[请求接口_%s'
                     '\ntitle   : %s'
                     '\naddress : %s'
                     '\nheaders : %s'
                     '\nparams  : %s'
                     '\nuseTime : %s'
                     '\nresponse: %s\n]\n'
                     % (alias, title, url, header, data_str, dt_str, resp_str), console=console,
                     save_log=save_log, log_path=log_path, level='info')
        return response

if __name__ == "__main__":
    pass
