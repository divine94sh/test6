import json
import random
import time
import cx_Oracle as cx
import os
from pymssql import connect
from elasticsearch import Elasticsearch
from WnLibraryV3.WnLog import WnLog
from WnLibraryV3.WnEncoder import WnEncoder
path = WnLog.path

'''
数据库操作
'''


class WnDatabase(object):
    ROBOT_LIBRARY_SCOPE = "GLOBAL"

    def wn_get_db_config(self, db_string, console=0, log_file=0, log_path=path):
        """用于解析数据库字符串"""
        db_string = db_string.strip('\"')
        db_config = {}
        db_list = db_string.split(';')
        for value in db_list:
            value = value.split('=')
            assert len(value) == 2, 'db_string invalid'
            db_config[value[0]] = value[1]
        assert False not in [name in db_config.keys() for name in ['Server', 'UID', 'PWD']], 'required key [Server, UID, PWD]'
        if not 'Database' in db_config:
            db_config['Database'] = 'master'
        if not 'Driver' in db_config:
            db_config['Driver'] = '{SQL Server}'
        # WnLog.wn_log(msg='\n[解析数据库字符串'
        #                  '\ndbString: %s'
        #                  '\ndbDict  : %s\n]\n'
        #                  % (db_string, json.dumps(db_config, ensure_ascii=False)),
        #              console=0,
        #              log_path=log_path,
        #              save_log=0)
        WnLog.wn_log(msg=str(db_config['Database']),
                     console=0,
                     log_path=log_path,
                     save_log=0)
        return db_config

    def wn_excute_query_sql_return_list(self, query_sql, db_string, if_as_dict=True, console=0, save_log=1, log_path=path, if_commit=0):
        """
        执行查询sql语句,返回list\n
        query_sql：要执行的sql语句，只能是查询语句\n
        db_string：数据库配置字符串\n
        if_as_dict： 传True  返回格式如下:\n
        [{'key1':value1,'key2':value2,'key3':value3...},\n
        {'key1':value1,'key2':value2,'key3':value3...},\n
        {'key1':value1,'key2':value2,'key3':value3...},]\n
        if_as_dict: 传False  返回格式如下:\n
        [(value1,value2,value3),(value1,value2,value3),...]\n
        if_print:  传True  会打印查询结果到 log 文件中  传False不打印
        """
        db_config = self.wn_get_db_config(db_string=db_string, console=0, log_file=1, log_path=path)
        server, user, password, database, driver = db_config['Server'], db_config['UID'], db_config['PWD'], db_config['Database'], db_config['Driver']
        t1 = time.time()
        if driver == '{Oracle}':
            with cx.connect(user, password, server) as conn:
                cursor = conn.cursor()
                cursor.execute(query_sql)
                if if_commit == 1:
                    res = cursor.fetchall()
                    if if_as_dict:
                        all_keys = [x[0] for x in cursor.description]
                        res = [dict(zip(all_keys, row)) for row in res]
                    count = len(res)
                    conn.commit()
                    # count = cursor.rowcount
                    # res = None
                else:
                    res = cursor.fetchall()
                    if if_as_dict:
                        all_keys = [x[0] for x in cursor.description]
                        res = [dict(zip(all_keys, row)) for row in res]
                    count = len(res)
        else:
            with connect(server, user, password, database=database) as conn:
                cursor = conn.cursor()
                cursor.execute(query_sql)
                if if_commit == 1:
                    res = cursor.fetchall()
                    if if_as_dict:
                        all_keys = [x[0] for x in cursor.description]
                        res = [dict(zip(all_keys, row)) for row in res]
                    count = len(res)
                    conn.commit()
                    # count = cursor.rowcount
                    # res = None
                else:
                    res = cursor.fetchall()
                    if if_as_dict:
                        all_keys = [x[0] for x in cursor.description]
                        res = [dict(zip(all_keys, row)) for row in res]
                    count = len(res)

        t2 = time.time()
        try:
            if len(json.dumps(res, ensure_ascii=False, cls=WnEncoder))<10000:
                WnLog.wn_log('\n[查询数据库'
                             '\nquerySql: %s'
                             '\ntime    : %s'
                             '\ncount   : %s'
                             '\nresult  : %s\n]\n'
                             % (query_sql,
                                str('%.4f' % (t2 - t1)),
                                str(count),
                                json.dumps(res, ensure_ascii=False, cls=WnEncoder))
                             , console=console, save_log=save_log, log_path=log_path)
        except Exception as e:
            WnLog.wn_log('\n[查询数据库'
                         '\nquerySql: %s'
                         '\ntime    : %s'
                         '\ncount   : %s'
                         '\nresult  : %s\n]\n'
                         % (query_sql,
                            str('%.4f' % (t2 - t1)),
                            str(count),
                            "返回结果解析失败")
                         , console=console, save_log=save_log, log_path=log_path)
        return res

    def wn_update_sql(self, query_sql, db_string, if_as_dict=True, console=0, save_log=1, log_path=path, if_commit=0):
        """
        执行查询sql语句,返回list\n
        """
        db_config = self.wn_get_db_config(db_string=db_string, console=0, log_file=1, log_path=path)
        server, user, password, database, driver = db_config['Server'], db_config['UID'], db_config['PWD'], db_config['Database'], db_config['Driver']
        t1 = time.time()
        if driver == '{Oracle}':
            with cx.connect(user, password, server) as conn:
                cursor = conn.cursor()
                cursor.execute(query_sql)
                conn.commit()
        else:
            with connect(server, user, password, database=database) as conn:
                cursor = conn.cursor()
                cursor.execute(query_sql)
                conn.commit()
        return 0

    def wn_excute_update_sql(self, update_sql, db_string, console=0, save_log=1, log_path=path):
        """执行增删改语句并提交"""
        for i in range(3):
            try:
                return self.wn_excute_query_sql_return_list(query_sql=update_sql, db_string=db_string, console=console, save_log=save_log, log_path=log_path, if_commit=1)
            except Exception as e:
                WnLog.wn_log("执行sql失败,次数(%s): %s\nerr info:%s" % (str(i), update_sql, str(e)))
                time.sleep(2)
        assert False, '执行' + update_sql + '失败'

    def wn_excute_list(self, update_sql, db_string, console=0, save_log=1, log_path=path):
        """返回的是list,不是字典"""
        for i in range(3):
            try:
                return self.wn_excute_query_sql_return_list(query_sql=update_sql, db_string=db_string, console=console,
                                                            save_log=save_log, log_path=log_path, if_commit=1,
                                                            if_as_dict=False)
            except Exception as e:
                # DatLog.dat_log("执行sql失败,次数(%s): %s\nerr info:%s" % (str(i), update_sql, str(e)))
                time.sleep(2)

    def wn_excute_query_sql_return_line(self, query_sql, index, db_string, console=0, save_log=1, log_path=path):
        """
        1-调用excute_query_sql_return_list()函数\n
        2-返回查询结果的第 index 行(index=0 则随机返回一行)\n
        3-返回格式: { key1':value1,'key2':value2,'key3':value3,...}\n
        """
        res = self.wn_excute_query_sql_return_list(query_sql=query_sql, db_string=db_string, console=console, save_log=save_log, log_path=log_path)
        index = int(index)
        assert len(res) >= index, '查询结果行数不够'
        if index == 0:
            line = random.choice(res)
        else:
            line = res[index - 1]
        WnLog.wn_log('line: ' + json.dumps(line, ensure_ascii=False, cls=WnEncoder), console=console, save_log=save_log, log_path=log_path)
        return line

    def wn_excute_query_sql_return_lines(self, query_sql, count, db_string, console=0, save_log=1, log_path=path):
        """
        1-调用excute_query_sql_return_list()函数\n
        2-从查询结果中随机取count行返回\n
        3-返回格式:\n
        [\n
        {'key1':value1,'key2':value2,'key3':value3...},\n
        {'key1':value1,'key2':value2,'key3':value3...},\n
        {'key1':value1,'key2':value2,'key3':value3...},\n
        ]
        """
        res = self.wn_excute_query_sql_return_list(query_sql=query_sql, db_string=db_string, console=console, save_log=save_log, log_path=log_path)
        count = int(count)
        assert len(res) >= count, '查询结果行数不够'
        lines = random.sample(res, count)
        WnLog.wn_log('lines: ' + json.dumps(lines, ensure_ascii=False, cls=WnEncoder), console=console, save_log=save_log, log_path=log_path)
        return lines

    def wn_excute_query_sql_return_count(self, query_sql, db_string, console=0, save_log=1, log_path=path):
        """执行sql,返回查询结果条数(int)"""
        res = self.wn_excute_query_sql_return_list(query_sql=query_sql, db_string=db_string, console=console, save_log=save_log, log_path=log_path)
        WnLog.wn_log(msg='count: ' + str(len(res)), console=console, save_log=save_log, log_path=log_path)
        return len(res)

    def wn_excute_query_sql_return_first_value(self, query_sql, db_string, console=0, save_log=1, log_path=path):
        """执行sql,返回查询结果的第一条的第一个字段的值"""
        res = self.wn_excute_query_sql_return_list(query_sql=query_sql, db_string=db_string, if_as_dict=False, console=console, save_log=save_log, log_path=log_path)
        WnLog.wn_log(msg=('value: ' + str(res[0][0])), console=console, save_log=save_log, log_path=log_path)
        return res[0][0]

    def wn_connect_es_get_field_by_keyword(self, db_string, keyword):
        """
        连接elasticSearch，根据药品名称，查询指定index指定列的值
        db_string：包含host,port,index,condition,field
        host:es的ip
        port:es的端口
        index：es的index
        keyword：条件的值
        condition:条件的列的名称
        field：需要查询的列的名称，对应es的field
        返回格式为list
        """
        db_string = db_string.strip('\"')
        db_config = {}
        db_list = db_string.split(';')
        for value in db_list:
            value = value.split('=')
            assert len(value) == 2, 'db_string invalid'
            db_config[value[0]] = value[1]
        host, port, index, condition, field = db_config['host'], db_config['port'], db_config['index'], db_config['condition'], db_config['field']

        # 连接es时host只写ip
        es_host = host
        es = Elasticsearch(hosts=es_host, port=port, timeout=15000)
        body = {
            "query": {
                "bool": {
                    "must": [],
                    "must_not": [],
                    "should": [
                        {
                            "term": {
                                condition: keyword
                            }
                        }
                    ]
                }
            },
            "from": 0,
            "size": 10,
            "sort": [],
            "aggs": {}
        }
        res = es.search(index=index, body=body)

        # 获取返回数据总量
        ques_count = res['hits']['total']
        # 获取返回数据
        data = res['hits']['hits']
        value = []
        # 检索字段并保存字段值
        for hits in data:
            value.append(hits["_source"][field])
        print(value)
        return value

    def wn_exec_onesqlfile(self,dir,db_string,save_log=1,console=1, log_path=path):
        """执行单个sql文件"""
        WnLog.wn_log("开始执行" + dir, console=0, save_log=1, log_path=log_path)
        db_config = self.wn_get_db_config(db_string=db_string, console=0, log_file=1, log_path=path)
        server, user, password, database, driver= db_config['Server'], db_config['UID'], db_config['PWD'], db_config[
            'Database'], db_config['Driver']
        t1 = time.time()

        if driver == '{Oracle}':
            with cx.connect(user, password, server) as conn:
                cursor = conn.cursor()
                # cursor.execute(content)
                conn.commit()
        else:
            with connect(server, user, password, database=database) as conn:
                cursor = conn.cursor()
                with open(dir, 'r', encoding='utf-8') as f:
                    sql_list = f.readlines()
                sqlcontent = ''
                for sql_item in sql_list:
                    sql_item=sql_item.rstrip()
                    sql_item = sql_item.replace('\n','').replace('\r','')
                    if (sql_item == '\n') or (sql_item == '\n\r') or (sql_item == '\r\n') or (sql_item == '') or (sql_item =='\r'):
                        sql_item = sql_item.strip()
                        sql_item = sql_item.strip('\n')
                        sql_item = sql_item.strip('\r')
                        sql_item = sql_item.strip('\n\r')
                        sql_item = sql_item.strip('\r\n')
                    # 如果去除制表符,且移除字符串后面的字符为空的话，移除
                    sql_item_notab = sql_item.replace('\t', '')
                    sql_item_notab = sql_item_notab.strip()
                    if len(sql_item_notab) == 0 :
                        continue

                    # print(len(sql_item_notab), sql_item_notab)
                    if sql_item.strip() == 'go' :
                        sql_item=sql_item+'\r\n'
                    #sp_helptext里的换行逻辑是char(13)+char(10) ,所以要用/r/n
                    sqlcontent =sqlcontent + sql_item+'\r\n'
                # sqlcontent.encode('utf-8').decode('ASCII')
                # print(sqlcontent)
                # 用go来分割脚本执行，防止相互影响,先加上换行，防止其他带go的字符被截取
                splitstring = 'go'+'\r\n'
                contentlist = sqlcontent.split(splitstring)
                # contentlist = sqlcontent.split('go\\r\\n')
                # contentlist = sqlcontent.split('go\n')
                # contentlist = sqlcontent.split('go\r')
                # contentlist = sqlcontent.split('go\r\n')
                # contentlist = sqlcontent.split('go\n\r')
                for content in contentlist:
                    try:
                        cursor.execute("SET QUOTED_IDENTIFIER OFF")
                        # print("ssss:   ")
                        # print(content)
                        cursor.execute(content)
                    except Exception as e:
                        WnLog.wn_log(dir + "执行失败", console=1, save_log=1, log_path=log_path)
                        raise
                        return
                conn.commit()
                # DatLog.dat_log(dir +"执行成功",console=1, save_log=1, log_path=log_path)

    def wn_exec_sqlfiles(self,dir,db_string,console=1,save_log=1,log_path=path):
        """执行目录或文件"""
        res = 0   #返回错误的数量
        if not os.path.exists(dir):
            # 尝试转换一次,把单引号转为双引号
            WnLog.wn_log(dir + '此目录不存在,尝试转换单斜杠', console=1, save_log=1,log_path=path)
            dir = eval(repr(dir).replace('\\', '\\\\'))
            # print(dir)
        if not os.path.exists(dir):
            WnLog.wn_log(dir+'目录仍然不存在', console=1, save_log=1,log_path=path)
            return 1
        # 传入文件名则直接执行
        if os.path.isfile(dir):
            # print(dir)
            self.wn_exec_onesqlfile(dir,db_string)
            return 0
        else:
            for root, dirs, files in os.walk(dir):
                for file in files:
                    fullname = os.path.join(root, file)
                    # print(fullname)
                    try:
                        self.wn_exec_onesqlfile(fullname, db_string, console=1, save_log=1, log_path=path)
                    except Exception as e:
                        WnLog.wn_log(e , console=1, save_log=1, log_path=log_path)
                        res = res+1
                        # print(res)
                    continue
                for walkdir in dirs:
                    fulldir = os.path.join(root, walkdir)
                    self.wn_exec_sqlfiles(fulldir, db_string, console=1, save_log=1, log_path=path)
        return res


    def  wn_changepname(self,pname,db_string,consol=1,save_log=1,log_path=path):
         pname_new= pname + '_wnt'
         db_config = self.wn_get_db_config(db_string=db_string, console=0, log_file=1, log_path=path)
         server, user, password, database, driver = db_config['Server'], db_config['UID'], db_config['PWD'], db_config[
            'Database'], db_config['Driver']
         t1 = time.time()

         if driver == '{Oracle}':
            with cx.connect(user, password, server) as conn:
                cursor = conn.cursor()
                # cursor.execute(content)
                conn.commit()
         else:
            with connect(server, user, password, database=database) as conn:
                cursor = conn.cursor()
                try:
                        cursor.execute("SET QUOTED_IDENTIFIER OFF")
                        sqlstring= 'sp_helptext '+pname
                        cursor.execute(sqlstring)
                        Phead="if  exists(select 1 from sysobjects where name=\'"+ pname_new + "\' and xtype='P')"
                        Phead=Phead + '\n' + ' drop proc '+ pname_new+'\n'
                        Newproc = ''
                        # return
                        for row in cursor:    #注意row是trump
                            s = row[0]
                            if s.find(pname) != -1:     #找到存储名
                                s = s.replace(pname, pname_new)
                            # if s.find('select "T"') != -1:    #此类输出给注释掉
                            #     s = '--' + s
                            #     Newproc = Newproc + s
                            #     continue
                            Newproc =Newproc + s + '\n'
                            # Newconnect=row.
                        # Newproc=Newproc+'go'+'\n'
                        # 去除ghf_pt为null的问题
                        # if Newproc.find('''if not exists(select 1 from  #ghmx where  isnull(xmdm,'')<>'' and isghf = 1 )''') != -1:
                        #     Newproc = Newproc.replace('''if not exists(select 1 from  #ghmx where  isnull(xmdm,'')<>'' and isghf = 1 )''', '''if(1=2) \r\n ''')
                        # #去除zlf_pt为null的问题
                        if Newproc.find('''select @is60pb=1''') != -1:
                            Newproc = Newproc.replace('''select @is60pb=1''','''select @is60pb=0 ''')
                        if Newproc.find('''if not exists(select 1 from  #ghmx where  isnull(xmdm,'')<>'' and isghf = 2 )''') != -1:
                            Newproc = Newproc.replace('''if not exists(select 1 from  #ghmx where  isnull(xmdm,'')<>'' and isghf = 2 )''', '''if(1=2) \r\n ''')
                        # 去除select "T"的返回集
                        if Newproc.find('''select "T"''') != -1:
                            Newproc = Newproc.replace('''select "T"''', '''if(1=2) \r\n select "T"''')
                        if Newproc.find('''select " T"''') != -1:
                            Newproc = Newproc.replace('''select " T"''', '''if(1=2) \r\n select "T"''')
                        if Newproc.find('''SELECT @ll_systemid AS ll_systemid''') != -1:
                            Newproc = Newproc.replace('''SELECT @ll_systemid AS ll_systemid''', '''if(1=2) \r\n SELECT @ll_systemid AS ll_systemid''')
                        if Newproc.find('''SELECT  Code = 1''') != -1 :
                            Newproc = Newproc.replace('''SELECT  Code = 1''', '''if(1=2) \r\n SELECT  Code = 1''')
                        if Newproc.find('''SELECT Code = 1''') != -1 :
                            Newproc = Newproc.replace('''SELECT Code = 1''', '''if(1=2) \r\n SELECT Code = 1''')
                        if Newproc.find('''SELECT code = 1''') != -1:
                            Newproc = Newproc.replace('''SELECT code = 1''', '''if(1=2) \r\n SELECT code = 1''')
                        if Newproc.find('''EXEC up_HisClinic_InsertOpdRecipe @cRecipeIDList''') != -1:
                            Newproc = Newproc.replace('''EXEC up_HisClinic_InsertOpdRecipe @cRecipeIDList''', '''EXEC up_HisClinic_InsertOpdRecipe_wnt @cRecipeIDList''')
                        cursor.execute(Phead)  # 删除已有存储,注意不要放在前面，因为execute后cursor内容会变，无法再取到原存储的值
                        # print(Newproc)
                        cursor.execute(Newproc)
                        conn.commit()
                except Exception as e:
                        WnLog.wn_log(pname_new+"修改执行失败", console=1, save_log=1, log_path=log_path)
                        return False
                WnLog.wn_log(pname_new+"修改执行成功", console=0, save_log=1, log_path=log_path)
                return True

# 从A库复制数据结构到B库,extendsql写 'where id=1'
#     def wn_copytab(self,tabname,db_string1,db_string2,extendsql,consol=1,save_log=1,log_path=path):
#         db_config1 = self.wn_get_db_config(db_string=db_string1, console=0, log_file=1, log_path=path)
#         server1, user1, password1, database1, driver1 = db_config1['Server'], db_config1['UID'], db_config1['PWD'], db_config1[
#             'Database'], db_config1['Driver']
#         db_config2 = self.wn_get_db_config(db_string=db_string2, console=0, log_file=1, log_path=path)
#         server2, user2, password2, database2, driver2= db_config2['Server'], db_config2['UID'], db_config2['PWD'], \
#                                                         db_config2[
#                                                             'Database'], db_config2['Driver']
#         t1 = time.time()
#
#         with connect(server1, user1, password1, database=database1) as conn1:
#
#             if extendsql != '':
#                 sqlstring = "select * from " + tabname+" "+extendsql
#             else:
#                 sqlstring = "select * from " + tabname
#             df = pd.read_sql(sqlstring, conn1)
# # 时间戳pandas暂无法处理
# #             if tabname != 'BG_WNDICTvsBZDICT' and tabname !='YY_UNIT':
# #                 df = df.drop('timetemp', axis=1)
#
#             if 'timetemp' in df.columns:
#                 df = df.drop('timetemp', axis=1)
#         #pyobbc
#
#         # sql_eng='''mssql+pymssql://QAOwner:sql2K!^QA@172.16.6.182\\WIN4DB:1434/win60_pdb1?charset=utf8'''
#         sql_eng='''mssql+pymssql://'''+user2+':'+password2+'@'+server2+'/'+database2
#
#         # str_eng='mysql+pymysql://'+user2+':'+password2+'@'+server2'+'/database2'
#         tabname_check = tabname + '_check'
#         CE = create_engine(sql_eng)
#         conn2 = CE.connect()
#         dropstring = "if exists(select 1 from sysobjects where name='"+tabname_check+"')  drop table "+tabname_check
#         #按条件查询，如已有数据优先删除
#         if extendsql != '':
#             dropstring_filter = "if exists(select 1 from " + tabname_check +"  "+ extendsql+ ")  delete from " + tabname_check+"  "+extendsql
#         else:
#             dropstring_filter=""
#         # addcol = "alter table " + tabname_check + " add  No_in60 int not null default 0 "
#         # print(dropstring)
#
#         try:
#             #业务数据表不删除，可能后面的流程场景还会使用
#             if tabname_check != 'SF_BRXXK_check' and tabname_check != 'GH_GHZDK_check' and tabname_check != 'SF_HJCFK_check' and tabname_check !='SF_HJCFMXK_check'\
#                     and tabname_check !='opdrecipemain_check' and tabname_check !='SF_HJCFMXK_check':
#                 conn2.execute(dropstring)
#                 df.to_sql(name=tabname_check, con=conn2, if_exists="append", index=False, chunksize=5000)
#                 # conn2.execute(addcol)
#             # 使用replace会报错，暂时先用append
#             else:
#                 try:
#                     conn2.execute(dropstring_filter)
#                     df.to_sql(name=tabname_check, con= conn2, if_exists="append", index=False, chunksize=5000)
#                 except Exception as e:
#                     # DatLog.dat_log(e)
#                     # print(e)
#                     conn2.execute(dropstring)
#                     df.to_sql(name=tabname_check, con=conn2, if_exists="append", index=False, chunksize=5000)
#         except Exception as e:
#             WnLog.wn_log(e)
#             return 1
#         df.drop(df.index, inplace=True)
#         conn2.close()
#         return 0

    # def wn_report(self,res,sheetname):
    #     """导出执行结果到excel"""
    #     dirname='wn_report_'+str(time.strftime('%Y-%m%d',time.localtime(time.time())))
    #     dirfullname=os.getcwd() + os.sep + dirname
    #     for i in range(3):
    #         if not os.path.exists(dirfullname):
    #             os.makedirs(dirfullname)
    #     fname=sheetname+'_reprot'+str(time.strftime('%Y-%m%d-%H%M%S',time.localtime(time.time())))+'.xlsx'
    #     IO = dirfullname + os.sep + fname
    #     # if os.path.isfile(IO):
    #     #     os.mknod(IO)
    #
    #     if res == None:
    #         df = DataFrame("测试OK!")
    #     else:
    #         df = DataFrame(res)
    #     writer =pd.ExcelWriter(IO)
    #     df.to_excel(writer, sheet_name=sheetname)
    #     writer.save()
    #     writer.close()

    def wn_report_html_init(self,report_fullname,hisdb,wndb):
        """初始化报告的html文件"""
        dir = os.path.dirname(report_fullname)
        for i in range(3):
            if not os.path.exists(dir):
                os.makedirs(dir)
        html = open(report_fullname, "w+",encoding="utf-8")
        html.write("""<?xml version="1.0" encoding="UTF-8"?>""")
        html.write("""<html> \n <head><meta charset=UTF-8> \n <title>fhir测试报告</title> \n""")
        #模块表头的css-body
        html.write("""<style type="text/css" media="screen">body{ font-family: Microsoft YaHei,Consolas,arial,sans-serif; font-size: 120%; } \n""")
        html.write(""".tb{width: 100%;text-align:center;border-collapse:collapse;border:none;} \n""")
        html.write(""".tr_cl_header{font-weight: bold;color: #303641;background-color: #ebebeb;} \n""")
        html.write(""".td_content{border: solid  #F5DEB3 1px;} \n""")
        html.write(""".fhir_FAIL{background-color: red;} \n""")
        html.write("""</style> \n""")
        #控制隐藏的js
        html.write("""<script type="text/javascript">function searchChange(id) {if(document.getElementById(id).classList.contains('hiden')){eles = document.getElementsByClassName(id);for(ele in eles){try{eles[ele].style.display='';}catch(e){}}document.getElementById(id).classList.remove('hiden');}else{eles = document.getElementsByClassName(id);for(ele in eles){try{eles[ele].style.display='none';}catch(e){}}document.getElementById(id).classList.add('hiden');}}</script> \n""")
        html.write("""</head>\n<body>""")
        html.write("""<h3 style="text-align:center">测试环境</h3>""")
        #根据hisdb,cisdb取出环境参数
        his_dbconfig = self.wn_get_db_config(hisdb)
        mzys_dbconfig = self.wn_get_db_config(wndb)
        html.write("""<div><table  border="1" cellspacing="0"  align="center" valign="center" style="text-align:center;"><th>System</th><th>Server</th><th>DB Name</th>""")
        html.write("""<tr><td>HIS</td><td>""" + his_dbconfig['Server']+"""</td><td>""" + his_dbconfig['Database'] + """</td></tr>""")
        html.write("""<tr><td>MZYS</td><td>""" + mzys_dbconfig['Server'] + """</td><td>""" + mzys_dbconfig['Database'] + """</td></tr>""")
        html.write("""</table></div>""")
        html.close()
        # html.write(""""</body></html>""")


    def wn_report_html_mod_head(self,report_fullname,header,tdlist):
        """入参1：报告绝对路径; 入参2：模块报告的大标题 ; 入参3: 报告的列名(列表);"""
        # 先读取原信息
        with open(report_fullname, "r",encoding="utf-8") as html_r:
            idname="fhir_"+header
            rea = html_r.read()
        # print(rea)
        #如果存在，就影藏
        if rea.find(idname) != -1:
            rea=rea.replace(idname+"'", idname+"' style='display:none'")
            with open(report_fullname, "w",encoding="utf-8") as html_w:
                html_w.write(rea)

        with open(report_fullname, "a", encoding="utf-8") as html:
            #新建模块
            html.write("""<div id='"""+idname+"""'><h2 style="text-align:center">"""+header+"""</h2>""")
            html.write("""<table class='tb' align="center" valign="center">""")
            #第一行标题
            tr1 = "<tr id='" + header +"' class='tr_cl_header' onclick='searchChange(this.id)'>"
            for tdlist_v in tdlist:
                tdlist_v = "<td>"+tdlist_v+"</td>"
                tr1 = tr1+tdlist_v
            tr1=tr1+"</tr>\n"
            html.write(tr1)

    def wn_report_html_mod_content(self,report_fullname,header,content):
        """写入单条用例的测试结果
        content是一个list,list第一个值要给执行时间，不然无法关联;测试结果用PASS和FAIL表示，用于超链接"""
        html = open(report_fullname, "a",encoding="utf-8")
        # extime = content[0]
        # del(content[0])
        #class name是为了影藏
        tr_content = "<tr class='"+header+" Case' >"
        for content_value in content:
            tr_content = tr_content + "<td class='td_content'>" + content_value + "</td>"
        tr_content=tr_content+"</tr>\n"
        html.write(tr_content)
        html.close()

    def wn_report_html_resformat(self,exec_time,html_res):
        """将结果格式化为可以链接详细页的按钮"""
        classname = 'fhir_'+html_res
        resformat = """<button class='"""+classname+"""' onclick="window.open('fhirtestlog/fhir_"""+exec_time+""".html')">"""+html_res+"""</button>"""
        return resformat

    def wn_report_html_mod_over(self,report_fullname):
        html = open(report_fullname, "a", encoding="utf-8")
        html.write("</table></div>")
        html.close()

    def wn_report_html_con_detail(self,report_fullname,filename,resinfo):
        """输入执行语句,添加执行语句结果的页面"""
        #先根据报告的全名去报告的目录
        dir = os.path.dirname(report_fullname)
        report_dir = dir + os.sep + "fhirtestlog"
        for i in range(3):
            if not os.path.exists(report_dir):
                os.makedirs(report_dir)
        name = "fhir_"+filename+".html"
        report_fullname=report_dir+os.sep+name
        html = open(report_fullname, "w", encoding="utf-8")
        html.write("""<?xml version="1.0" encoding="UTF-8"?><html> \n <head><meta charset=UTF-8><h2>详细校验信息：</h2></head>""")
        html.write("""<table  border="1" cellspacing="0">""")
        for res in resinfo:
            html.write("""<tr><td>""" + str(res[0]) + """</td><td>""" + str(res[1]) + """</td></tr>""")
        html.write("""</table>""")
        html.close()

    def wn_find(self, query_sql, db_string, if_as_dict=True, console=0, save_log=1, log_path=path, if_commit=0):
        """
        执行查询sql语句,返回list\n
        """
        db_config = self.wn_get_db_config(db_string=db_string, console=0, log_file=1, log_path=path)
        server, user, password, database, driver = db_config['Server'], db_config['UID'], db_config['PWD'], db_config['Database'], db_config['Driver']
        t1 = time.time()
        if driver == '{Oracle}':
            with cx.connect(user, password, server) as conn:
                cursor = conn.cursor()
                cursor.execute(query_sql)
                res=cursor.fetchall()
                return res
        else:
            with connect(server, user, password, database=database) as conn:
                cursor = conn.cursor()
                res = cursor.execute(query_sql)
                res = cursor.fetchall()

                return res

    def wn_dic_update(self,dic, col, val):
        ''' 判断key是否存在并更新key的值 '''
        if col in dic.keys():
                dic[col] = val
        else:
            raise Exception('输入的字典'+str(dic)+'不包含key:'+col)

    def  wn_fhir_compare(self,hisv,wnv):
         errlist = []
         for key in hisv.keys():
             if key not in wnv.keys():
                 expinfo = 'his的表字段['+str(key)+']在wn60数据中没有取值，无法对比!'
                 errlist.append(expinfo)
             else:
                 if str(hisv[key]) != str(wnv[key]):
                     errorinfo = '字段['+str(key)+']值不同,his中为:'+str(hisv[key])+',wn60中为:'+str(wnv[key])
                     errlist.append(errorinfo)
         return  errlist

if __name__ == "__main__":
    wndb = WnDatabase()
    # ghinfo_his = {'fzbz': '未就诊', 'ghlb': '普通门诊'}
    # ghinfo_wn = {'fzbz': 152679, 'ghlb': 255618, 'jlzt': 256712, 'ksdm': '2021'}
    # res = wndb.wn_fhir_compare(ghinfo_his, ghinfo_wn)
    # print(res)
    # sql_string = "UPDATE ENC.OUTPATIENT_ENCOUNTER SET SCHEDULED_DATE = '2019-09-06' WHERE encounter_id = '37951155640369153'"
    # db_string = "Server=172.16.6.181\windb;Port=1443;Database=windb6_lylt;UID=windevquery;PWD=windevquery"
    # wndb.wn_excute_update_sql(sql_string, db_string)
    # sql2 = "usp_create_djgh_auto 2021"
    # db_win60 = "Server=172.16.6.182\win4db;Database=win60_pdb1;UID=HISMANAGER;PWD=sql2K!^HISM"
    db_his = "Server=172.16.6.182\win4db;Database=THIS4_LYLT;UID=HISMANAGER;PWD=sql2K!^HISM"
    db_his99="Server=172.19.20.2;Database=SDEY_HIS;UID=sa;PWD=WinDev@5.6"
    # # dir="D:\\0000.PycharmProjects\\winning-automation-test\\6.0TEST\\用例层\\00_sql部署\\sqlfiles\\WN60_DChecker\\CL_Template\\"
    res = wndb.wn_changepname("usp_gh_ghdj",db_his)
    # # res = wndb.wn_exec_sqlfiles(dir,db_string2)
    # # res = wndb.wn_copytab('YY_SFXXMK',db_win60)
    # tdlist=["患者patid","校验结果","校验语句"]
    # valist=["123", "dfdf", "fff",'ddd']
    # valist2 = [["exec wnt_ALL 256181,'SF_BRXXK',3332867", []],]
    # # wndb.wn_report_html_init("E://test.html",db_his,db_win60)
    # # wndb.wn_report_html_mod_head("E://test.html","基本信息登记", tdlist)
    # # wndb.wn_report_html_mod_content("E://test.html","基本信息登记",valist)
    # # wndb.wn_report_html_mod_content("E://test.html","基本信息登记", valist2)
    # wndb.wn_report_html_con_detail("E://test.html","12121", valist2)
    # wndb.wn_report_html_mod_over("E://test.html")
    # print(res)
