import json
import requests
import re
import copy
import os
from WnLibraryV3 import WnRequest

'''
WIN6.0项目接口自动化代码生成器
V3.2
'''


class Wn_yapi(object):
    '''
    yapi访问类
    '''

    def __init__(self):
        '''
        :param api_host: api访问路径，默认值为记录域病历前台url
        '''
        self.host = "http://172.16.0.151:3000"
        self.wnrequest = WnRequest()
        self.login_headers = None

    # 登陆
    def login_yapi(self):
        url_login = "/api/user/login_by_ldap"
        res = self.wnrequest.wn_post_req(url=self.host, uri=url_login,
                                         data='{"email": "litun", "password": "qq@@8888"}',
                                         header={'Content-Type': 'application/json', 'charset': 'utf-8'}, time_out=200,
                                         alias='登录')
        set_cookie = res.headers['Set-Cookie']
        token = re.findall('_yapi_token=.*?;', set_cookie)[0]
        uid = re.findall('(_yapi_uid=.*?);', set_cookie)[0]
        self.login_headers = {'Content-Type': 'application/json', 'charset': 'utf-8', 'Cookie': token + ' ' + uid}
        return self.login_headers

    # 获取WIN.60所有的项目
    def get_project_list(self):
        if self.login_headers == None:
            self.login_yapi()
        res = requests.get(url=self.host + '/api/project/list', params={"group_id": 95}, headers=self.login_headers)
        list = res.json()['data']['list']
        return list

    # 获取指定名字的项目
    def get_project_by_name(self, name):
        """根据项目名称获取"""
        project_list = self.get_project_list()
        # print(project_list)
        for project in project_list:
            if project['name'] == name:
                return project
        print("未查找到指定名称项目：" + name)
        return False

    # 获取项目下面的所有api
    def get_api_by_project(self, project):
        if self.login_headers == None:
            self.login_yapi()
        all_api = []
        res = requests.get(url=self.host + '/api/interface/list_menu', params={"project_id": project['_id']},
                           headers=self.login_headers)
        api_menus = res.json()['data']
        for api_menu in api_menus:
            api_list = api_menu['list']
            for api in api_list:
                # print(api)
                api['path'] = project['basepath'] + api['path']  # basepath可能为空
                if "废弃" not in api["title"]:
                    all_api.append(api)
                    # print(api)
        return all_api

    # 通过项目名称获取所有api相关信息
    def get_api_by_name(self, name):
        if self.login_headers == None:
            self.login_yapi()
        project = self.get_project_by_name(name)
        api_list = self.get_api_by_project(project)
        return api_list

    def get_api_param_info(self, api):
        '''
        通过api信息获取具体api的入参详细描述
        :param api:
        :return:
        '''
        res = requests.get(url=self.host + '/api/interface/get', params={"id": api['_id']},
                           headers=self.login_headers)
        try:
            req_body_other = res.json()['data']['req_body_other']
            return json.loads(req_body_other)
        except Exception as e:
            return None  # yapi不规范,没写body

    # 获取全部入参data代码
    def get_api_param_code(self, param_info, key_name='default'):
        '''
        :param param_info: 入参详细描述信息req_body_other
        :param key_name:
        :return:
        '''
        if param_info == None:
            return '{}'

        if param_info['type'] == 'array':
            return [self.get_api_param_code(param_info['items'], key_name=key_name)]
        elif param_info['type'] == 'object':
            right_value = {}
            try:
                for k, v in param_info['properties'].items():
                    right_value[k] = self.get_api_param_code(v, key_name=k)
            except Exception as e:
                pass  # yapi不规范,body中的项为空，无properties
            finally:
                return right_value
        else:
            # print(key_name, param_info['description'])
            return '${%s}' % key_name

    def get_api_require_param_code(self, param_info, param_code):
        '''
        获取仅含必须入参data代码
        :param param_info:
        :param param_code:
        :return:
        '''
        if param_info == None:
            return json.dumps('{}')

        if 'required' in param_info:
            # 获取仅必填case的代码
            wrong_param = copy.deepcopy(param_code)
            for k in param_code.keys():
                if k not in param_info['required']:
                    wrong_param.pop(k)
            return json.dumps(wrong_param)
        else:
            return json.dumps('{}')

    def get_api_wrong_param_code(self, api_name, param_info, param_code):
        '''
        获取缺少必须入参data代码,返回值是列表，如["缺必填项(bizRoleId)    {'scheduledId': '${scheduledId}', 'timeSegmentId': '${timeSegmentId}'}"]
        :param param_info:
        :param param_code:
        :return:
        '''
        if param_info == None:
            return None

        wrong_case_code = []
        if 'required' in param_info:
            # 获取缺少必填项case的代码
            for required_key in param_info['required']:
                wrong_param = copy.deepcopy(param_code)
                wrong_param.pop(required_key)
                wrong_case_code.append("缺必填项%s" % (required_key) + "    " + str(wrong_param))
        return wrong_case_code


class Build(object):
    api_code_suffix = "接口.robot"
    variable_code_suffix = "变量.robot"
    param_code_suffix = "入参.robot"
    case_code_suffix = "用例.robot"

    def __init__(self, projectName="", api_host="", appid=""):
        '''
        :param projectname:yapi对应的项目名称
        :param api_host:域访问地址，url+端口号
        :param appid:域appid
        '''
        self.name = projectName
        self.wn_yapi = Wn_yapi()
        self.api_host = api_host
        self.appid = appid
        self.wrong_param_code_list = []  # 保存缺少必填项入参名称用于Case生成

    def build_api_kw_init(self, fileName):
        fileName = os.path.abspath('.') + os.sep + fileName
        if os.path.exists(fileName):
            os.remove(fileName)
        print("api file save to " + fileName)
        f = open(fileName, 'a', encoding='UTF-8')
        f.write('*** Settings ***' + '\n')
        f.write('Library           WnLibraryV3' + '\n')
        f.write('Library           RequestsLibrary' + '\n')
        f.write('Resource          ../../操作层/通用/通用_变量.robot' + '\n')
        f.write('\n')
        f.write('*** Variables ***' + '\n')
        f.write('${host}    ' + self.api_host + '\n')
        f.write('\n')
        f.write('*** Keywords ***' + '\n')
        f.close()

    # 生成接口层关键字,name为yapi项目名称，如：就诊域业务前台服务接口.robot
    # xxxx接口.robot
    def build_api_kw(self):
        kw_save_name = self.name + Build.api_code_suffix
        self.build_api_kw_init(kw_save_name)  # 项目名称作为文件夹

        f = open(kw_save_name, 'a', encoding='UTF-8')
        api_list = self.wn_yapi.get_api_by_name(self.name)
        for api in api_list:
            kw_name = api["title"]
            uri = api["path"]
            f.write(kw_name + '\n')
            f.write('    ' + '[Arguments]    ${data}    ${headers}=${default_headers}' + '\n')
            f.write('    ' + 'Create Session    api    ${host}    ${headers}    verify=${False}' + '\n')
            f.write('    ' + '${Ret}    Post Request    api    ' + uri + '    data=${data}' + '\n')
            f.write('    ' + '[Return]    ${Ret}' + "\n\n")
        f.close()

    # xxx变量.robot
    def build_variables(self, api_list):
        '''
        生成变量文件
        :param api_list: 获取的api详细列表信息
        :param name: yapi对应项目的group名称,用于生成保存变量的文件名
        :return:
        '''
        variables_save_name = self.name + Build.variable_code_suffix
        fileName = os.path.abspath('.') + os.sep + variables_save_name
        if os.path.exists(fileName):
            os.remove(fileName)
        print("variables file save to " + fileName)
        f = open(variables_save_name, 'a', encoding='UTF-8')
        f.write('*** Variables ***' + '\n')
        f.write('${appid}' + '    ' + self.appid + "\n\n")  # appid保存在第一位
        # 保存变量
        vars = []
        for api in api_list:
            api_info = self.wn_yapi.get_api_param_info(api)
            param = self.wn_yapi.get_api_param_code(api_info)
            temp = re.findall('\${.*?\}', str(param))
            for var in temp:
                if var not in vars:
                    vars.append(var)
                    f.write(var + "\n")
        f.write("\n")
        f.close()

    # xxxx入参.robot
    def build_param(self, api_list):
        '''
        生成入参文件
        :param api_list: 获取的api详细列表信息
        :param name: yapi对应项目的group名称,用于生成保存变量的文件名
        :return:
        '''
        param_save_name = self.name + Build.param_code_suffix
        fileName_param = os.path.abspath('.') + os.sep + param_save_name
        if os.path.exists(fileName_param):
            os.remove(fileName_param)
        print("request param file save to " + param_save_name)
        # 保存入参
        f1 = open(param_save_name, 'a', encoding='UTF-8')
        f1.write('*** Settings ***' + '\n')
        f1.write('Resource          ./' + self.name + '变量.robot' + '\n\n')
        f1.write('*** Variables ***' + '\n')
        for api in api_list:
            api_info = self.wn_yapi.get_api_param_info(api)
            param_code = self.wn_yapi.get_api_param_code(api_info)
            api_name = api["title"]
            # {'encounterId': '${encounterId}'}
            param = str(param_code)
            param = str(param).replace('\'${', '${')
            param = str(param).replace('}\'', '}')
            param = str(param).replace('\'', '"')
            f1.write('${' + api_name + '}' + '    ' + str(param) + '\n')

            # 保存缺少必填项入参
            wrong_param_list = self.wn_yapi.get_api_wrong_param_code(api_name, api_info, param_code)
            if wrong_param_list != None:
                for wrong_param in wrong_param_list:
                    wrong_param_entry = str(wrong_param.split("    ")[1])
                    wrong_param_entry = str(wrong_param_entry).replace('\'${', '${')
                    wrong_param_entry = str(wrong_param_entry).replace('}\'', '}')
                    wrong_param_entry = str(wrong_param_entry).replace('\'', '"')
                    f1.write(
                        '${' + api_name + '_' + wrong_param.split("    ")[0] + '}' + '    ' + wrong_param_entry + '\n')
                    self.wrong_param_code_list.append(api_name + '_' + wrong_param.split("    ")[0])  # 保存缺少必填项的所有入参名称
        f1.close()

    def build_api(self):
        '''
        生成接口层
        '''
        self.build_api_kw()

    # xxx用例.robot
    def build_case(self, need_token=True):
        '''
        生成case，如果need_token为True，header中的authorization会通过登陆获取token
        '''
        case_save_name = self.name + Build.case_code_suffix
        fileName = os.path.abspath('.') + os.sep + case_save_name
        if os.path.exists(fileName):
            os.remove(fileName)
        print("case file save to " + fileName)
        folder_name = self.name.split("域")[0] + "域"
        f = open(fileName, 'a', encoding='UTF-8')
        f.write('*** Settings ***' + '\n')
        f.write('Library           WnLibraryV3' + '\n')
        f.write('Resource          ../../操作层/通用/通用_API_操作层.robot' + '\n')
        f.write('Resource          ../../接口层/' + folder_name + '/' + self.name + '接口.robot' + '\n')
        f.write('Resource          ./' + self.name + '入参.robot' + '\n')

        if need_token:
            f.write('Suite Setup    初始化数据' + '\n')

        f.write('\n')
        f.write('*** Test Cases ***' + '\n')

        api_list = self.wn_yapi.get_api_by_name(self.name)
        for api in api_list:
            case_name = api["title"]
            f.write(case_name + '\n')
            f.write('    [Tags]    DEBUG' + '\n')
            f.write('    ${response}    ' + case_name + '    ' + '${' + case_name + '}' + '\n')
            f.write('    wn_check_res    ${response}    ${appid}    ${True}' + '\n')

            # 生成非必填项入参Case
            for wrong_param_name in self.wrong_param_code_list:
                if case_name in wrong_param_name:
                    f.write('    ${response}    ' + case_name + '    ' + '${' + wrong_param_name + '}' + '\n')
                    f.write('    wn_check_res    ${response}    ${appid}    ${False}    ${缺必填项错误码}' + '\n')
            f.write('\n')

    def build_code(self, need_token=True):
        '''
        needtoken为True用于生成需要登陆获取token作为Header的前台Case，为False则不执行该步骤
        :param needtoken:
        :return:
        '''
        api_list = self.wn_yapi.get_api_by_name(self.name)
        self.build_api()
        self.build_variables(api_list)
        self.build_param(api_list)
        self.build_case(need_token)


def demo():
    '''自动生成用例demo，参照demo自动生成case'''
    build = Build("就诊域业务前台服务", "http://172.16.6.212/outpat-person", "4001")
    build.build_code()


if __name__ == '__main__':
    print(os.path.abspath('.'))
    build = Build("就诊域业务前台服务", "http://172.16.6.212/outpat-person", "4001")
    build.build_api_kw_init("testwn")
    build.build_variables([])

    # pass
