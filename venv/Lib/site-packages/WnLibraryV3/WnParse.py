import json
import random
import time
import string
from WnLibraryV3 import WnLog
from WnLibraryV3.WnEncoder import WnEncoder

path = WnLog.path

'''
数据解析相关关键字
'''


class WnParse(object):

    def wn_edit_key(self, old_key):
        """将下划线命名方式转成驼峰"""
        arr = filter(None, old_key.lower().split('_'))
        new_key = arr[0]
        for i in arr[1:]:
            new_key = new_key + i[0].upper() + i[1:]
        return new_key

    def wn_edit_list(self, old_list):
        """按照接口返回格式修改list(字段名修改为驼峰)"""
        new_list = []
        if type(old_list) == dict:
            return self.edit_dict(old_dict=old_list)
        for value in old_list:
            if type(value) == dict:
                new_list.append(self.edit_dict(value))
            elif type(value) == list:
                new_list.append(self.edit_list(value))
            else:
                new_list.append(value)
        return new_list

    def wn_edit_dict(self, old_dict):
        """按照接口返回格式修改dict"""
        new_dict = {}
        for k, v in old_dict.items():
            new_key = self._edit_key(str(k))
            if type(v) == dict:
                new_dict[new_key] = self.edit_dict(v)
            elif type(v) == list:
                new_dict[new_key] = self.edit_list(v)
            else:
                new_dict[new_key] = v
        return new_dict

    def wn_change_type_and_assert_equal(self, param1, param2, skip_key=[]):
        """将传入的两个字段类型修改为一致,并对比内容是否完全一致(跳过skip_key中包含的所有字段)"""
        # skip_key += ['createdAt', 'modifiedAt', 'isDel', 'hospitalSoid', 'deactivatedAt', 'deActivatedAt', 'hospitalSOID']
        t1 = time.time()
        WnLog.wn_log('\n[数据对比'
                    '\napi data: %s'
                    '\ndb  data: %s\n]' %
                    (json.dumps(param1, ensure_ascii=False, cls=WnEncoder),
                     json.dumps(param2, ensure_ascii=False, cls=WnEncoder)))
        assert type(param2) == list, 'param2必须是list'
        assert type(param1) in [list, dict], 'param1必须是list或dict'
        if type(param1) == dict:
            assert len(param2) == 1, 'param2长度不等于1'
            assert type(param2[0]) == dict, 'param2[0]不是字典'
            param2 = param2[0]
        assert type(param2) == type(param1), '类型转换异常'
        assert self._assert_equal(param1=param1, param2=param2, skip_key=skip_key), '验证不通过'
        t2 = time.time()
        WnLog.wn_log('对比通过\n跳过字段:' + str(skip_key) + '\n用时:' + str('%.4f' % (t2 - t1)))
        return True

    def wn__assert_equal(self, param1, param2, skip_key=[]):
        """
        对比两个参数是否一致,可传入list或者dict\n
        skip_key=['a','b'], 跳过字段 'a','b' 不对比
        """
        try:
            if type(param1) == dict:
                keys1, keys2, keys_skip = set(param1.keys()), set(param2.keys()), set(skip_key)
                err_keys = (keys1 ^ keys2) - keys_skip
                # WnLog.wn_log(keys1 ^ keys2)
                assert err_keys == set([]), str([key for key in err_keys]) + '字段不一致'
                for k, v in param1.items():
                    if k in skip_key:
                        # WnLog.wn_log('skiped :'+k)
                        continue
                    if type(v) in [dict, list]:
                        assert self._assert_equal(param1=v, param2=param2[k], skip_key=skip_key), '[%s]字段内容不一致' % k
                    else:
                        assert str(v) == str(param2[k]), '[%s]字段内容不一致' % k
                        # WnLog.wn_log('checked:'+k)
            elif type(param1) == list:
                assert len(param1) == len(param2), '数组长度不一致'
                for index in range(0, len(param1)):
                    if type(param1[index]) in (dict, list):
                        assert self._assert_equal(param1=param1[index], param2=param2[index], skip_key=skip_key), '数组[%s]不一致' % str(index)
                    else:
                        assert str(param1[index]) == str(param2[index]), '数组[%s]不一致' % str(index)
        except Exception as e:
            WnLog.wn_log(e)
            return False
        return True

    def wn_to_str(self, *args):
        """把所有入参拼接成一个字符串作为返回"""
        final_string = ''
        for arg in args:
            final_string += str(arg)
        return final_string

    def wn_get_rand_int(self, length=6):
        """获取随机数字字符串"""
        length = length if length < 10 else 10
        return ''.join(random.sample('0123456789', length))

    def wn_get_rand_str(self, length=6):
        """获取随机字符串"""
        length = length if length < 62 else 62
        return ''.join(random.sample(string.ascii_letters + string.digits, length))

    def wn_get_list_length(self, arr=[]):
        """传入数组,返回数组长度"""
        return len(arr)

    def wn_json_dumps(self, j, indent=None):
        """返回格式化的json字符串"""
        if type(indent) == int:
            return json.dumps(j, indent=indent, ensure_ascii=False, cls=WnEncoder)
        else:
            return json.dumps(j, indent=None, ensure_ascii=False, cls=WnEncoder)

    def wn_check_result(self, res, expression):
        if type(res) in [str]:
            res = eval(res)

        if expression == '':
            return True
        else:
            expression = str(expression)
        try:
            exec('flag=(' + expression + ')')
        except Exception as e:
            WnLog.wn_log(msg='语法错误:' + expression + '(' + str(e) + ')', level='error')
            assert False, str('语法错误:' + expression)
        if locals()['flag'] == True:
            WnLog.wn_log(msg='检查通过:' + expression)
        else:
            WnLog.wn_log(msg='检查不通过:' + expression, level='error')

    def wn_get_dict_by_key(self, key, value, dict_list):
        for dict in dict_list:
            if dict[key] == value:
                return dict
        return False

if __name__ == "__main__":
    print(wn_edit_key("wn_test"))
    print(wn_edit_list(["ab","ccc","dddd"]))

    pass


